{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\OneDrive\\\\Escritorio\\\\Full Stack Open\\\\part1\\\\unicafe\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Button = ({\n  clickEvent,\n  name\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickEvent,\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = Button;\n\nconst Statistic = ({\n  value,\n  text\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c2 = Statistic;\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad\n}) => {\n  const total = good + neutral + bad;\n  const average = total / 3;\n  const positive = good / total * 100;\n\n  if (good === 0 && neutral === 0 && bad === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No feedback given\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(Statistic, {\n            text: \"good\",\n            value: good\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n            text: \"neutral\",\n            value: neutral\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n            text: \"bad\",\n            value: bad\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n            text: \"total\",\n            value: total\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n            text: \"average\",\n            value: average\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n            text: \"positive\",\n            value: isNaN(positive) ? 0 : positive + ' %'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n};\n\n_c3 = Statistics;\n\nconst App = () => {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Give Feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      clickEvent: () => setGood(good + 1),\n      name: \"Good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      clickEvent: () => setNeutral(neutral + 1),\n      name: \"Netral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      clickEvent: () => setBad(bad + 1),\n      name: \"Bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      neutral: neutral,\n      bad: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c4 = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 68,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Statistic\");\n$RefreshReg$(_c3, \"Statistics\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["C:/Users/asus/OneDrive/Escritorio/Full Stack Open/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Button","clickEvent","name","Statistic","value","text","Statistics","good","neutral","bad","total","average","positive","isNaN","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({ clickEvent, name }) => {\n  return (\n    <>\n      <button onClick={clickEvent}>{name}</button>\n    </>\n  );\n};\n\nconst Statistic = ({ value, text }) => {\n  return (\n    <>\n      <tr>\n        <td>{text}</td>\n        <td>{value}</td>\n      </tr>\n    </>\n  );\n};\n\nconst Statistics = ({ good, neutral, bad }) => {\n  const total = good + neutral + bad;\n  const average = total / 3;\n  const positive = (good / total) * 100;\n\n  if (good === 0 && neutral === 0 && bad === 0) {\n    return <p>No feedback given</p>;\n  } else {\n    return (\n      <>\n        <h2>Statistics</h2>\n        <table>\n          <tbody>\n            <Statistic text=\"good\" value={good} />\n            <Statistic text=\"neutral\" value={neutral} />\n            <Statistic text=\"bad\" value={bad} />\n            <Statistic text=\"total\" value={total} />\n            <Statistic text=\"average\" value={average} />\n            <Statistic\n              text=\"positive\"\n              value={isNaN(positive) ? 0 : positive + ' %'}\n            />\n          </tbody>\n        </table>\n      </>\n    );\n  }\n};\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n      <Button clickEvent={() => setGood(good + 1)} name=\"Good\" />\n      <Button clickEvent={() => setNeutral(neutral + 1)} name=\"Netral\" />\n      <Button clickEvent={() => setBad(bad + 1)} name=\"Bad\" />\n      <Statistics good={good} neutral={neutral} bad={bad} />\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}